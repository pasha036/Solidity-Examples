// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

contract Primitives {
    bool public boo = true;

    /*
    uint işaretsiz tamsayı anlamına gelir, yani negatif olmayan tamsayılar için
    farklı boyutlar mevcuttur
        uint8  0 to 2 ** 8 - 1 arasında değer alabilir
        uint16 0 to 2 ** 16 - 1 arasında değer alabilir
        ...
        uint256 0 to 2 ** 256 - 1 arasında değer alabilir
    */
    uint8 public u8 = 1;
    uint public u256 = 456;
    uint public u = 123; // uint is an alias for uint256

    /*
    int türleri için negatif sayılara izin verilir.
    Uint gibi, int8'den int256'ya kadar farklı aralıklar mevcuttur

    int256 -2 ** 255 to 2 ** 255 - 1 arasında değer alabilir
    int128 -2 ** 127 to 2 ** 127 - 1 arasında değer alabilir
    */
    int8 public i8 = -1;
    int public i256 = 456;
    int public i = -123; // int is same as int256

    // minimum ve maximum int değerler
    int public minInt = type(int).min;
    int public maxInt = type(int).max;

    address public addr = 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c;

    /*
    Solidity'de veri türü byte, bir bayt dizisini temsil eder.
    Solidity iki tür bayt türü sunar: :

     - sabit byte dizisi
     - dinamik byte dizisi.
     
     Solidity'deki byte terimi, dinamik bir bayt dizisini temsil eder.     
     byte[] ın kısaltmasıdır.
    */
    bytes1 a = 0xb5; //  [10110101]
    bytes1 b = 0x56; //  [01010110]

    // Varsayılan değerler
    // Atanmamış değişkenlerin varsayılan bir değeri vardır
    bool public defaultBoo; // false
    uint public defaultUint; // 0
    int public defaultInt; // 0
    address public defaultAddr; // 0x0000000000000000000000000000000000000000
